
@{
    ViewData["Title"] = "Index";
}

<style>
    .staistics {
        direction: ltr;
    }

        .staistics div {
            font: 10px sans-serif;
            background-color: steelblue;
            text-align: right;
            padding: 3px;
            margin: 1px;
            color: white;
        }
</style>

<div class='page_title_container'>
    <h2 class='page_title'>מסך הבית</h2>
</div>


<div class='home_container'>
    <div class='weather_container'>
        <div class='weather_branch_details'>
            <div id='branch_name'></div>
            <div class='branch_address_container'>
                <div id='branch_city'></div>
                <div id='branch_address'></div>
            </div>
            <div id='branch_phone'></div>
        </div>
        <div class='weather_details'>
            <div class='degrees_and_img'>
                <img id='weather_img' />
                <div class='weather_degrees_container'>
                    <div class='degrees_sign'>C°</div>
                    <div id='weather_degrees' class='degrees'></div>
                </div>
            </div>
            <div id='humidity'></div>
            <div id='wind_speed'></div>
        </div>
    </div>
</div>

<div class="staistics">

</div>

<script src='~/lib/jquery/dist/jquery.js'></script>
<script src="~/lib/d3/d3.js"></script>
<script>
    $(document).ready(getLocation)

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(fetchNearestBranch)
        }
    }

    function fetchNearestBranch(position) {
        $.ajax({
            type: 'GET',
            url: '/Home/AjaxGetCall',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: getWeather,
            data: {
                lng: position.coords.longitude,
                lat: position.coords.latitude
            }
        })
    }

    function getWeather(branch) {
        $.ajax({
            url: 'http://api.openweathermap.org/data/2.5/weather',
            data: {
                lat: branch.lat,
                lon: branch.long,
                units: 'metric',
                APPID: '50e5e552a74c7defcc7607a0fce0fdf6'
            },
            success: function (res) { showWeatherDetails(branch, res) }
        })
    }

    function showWeatherDetails(branch, weather) {
        $('#branch_name').html('הסניף הקרוב אלייך: ' + branch.name);
        $('#branch_city').html(branch.city);
        $('#branch_address').html(', ' + branch.address);
        $('#branch_phone').html('טלפון: ' + branch.telephone);
        $('#weather_degrees').html(weather.main.temp);
        $('#humidity').html('לחות: ' + weather.main.humidity + '%');
        $('#wind_speed').html('רוח: ' + weather.wind.speed + ' קמ"ש');
        $('#weather_img').attr('src', 'http://openweathermap.org/img/w/' + weather.weather[0].icon + '.png');
        $('.weather_container').css('visibility', 'visible');
    }
</script>
@* --------------------------------- statistics --------------------------------- *@
<script>
    $.ajax({
        type: 'GET',
        url: '/Home/BranchSales',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: createBranchSalesGraph,
    });

    $.ajax({
        type: 'GET',
        url: '/Home/ProductSales',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: createBranchSalesGraph,
    });

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }
</script>