<h2>דף מנהל</h2>

<style>
    .staistics {
        direction: ltr;
    }
</style>

<div class="staistics">
</div>

<script src='~/lib/jquery/dist/jquery.js'></script>
<script src="~/lib/d3/d3.js"></script>
<script>
    $.ajax({
        type: 'GET',
        url: '/Admin/BranchSales',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: createBranchSalesGraph,
    });

    $.ajax({
        type: 'GET',
        url: '/Admin/ProductSales',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: createBranchSalesGraph,
    });

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }

    function createBranchSalesGraph(data) {
        var margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        var height = 300;
        var width = 500;
        var yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        var xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x)
                .tickSizeOuter(0));
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count)]).nice()
            .range([height - margin.bottom, margin.top]);
        var x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);

        const svg = d3.select('.staistics')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        svg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect").data(data).enter().append("rect")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.count))
            .attr("height", d => y(0) - y(d.count))
            .attr("width", x.bandwidth());

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(yAxis);

        svg.node();
    }
</script>

@*<script>
    const data =
        [
            { "region": "North", "count": "53245" },
            { "region": "South", "count": "28479" },
            { "region": "East", "count": "19697" },
            { "region": "West", "count": "24037" },
            { "region": "Central", "count": "40245" }
        ];

    const width = 540;
    const height = 540;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select('.staistics')
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", `translate(${width / 2}, ${height / 2})`);

    const color = d3.scaleOrdinal(["#66c2a5", "#fc8d62", "#8da0cb",
        "#e78ac3", "#a6d854", "#ffd92f"]);

    const pie = d3.pie()
        .value(d => d.count)
        .sort(null);

    const arc = d3.arc()
        .innerRadius(0)
        .outerRadius(radius);

    function arcTween(a) {
        const i = d3.interpolate(this._current, a);
        this._current = i(1);
        return (t) => arc(i(t));
    }

    // Join new data
    const path = svg.selectAll("path")
        .data(pie(data));

    // Update existing arcs
    path.transition().duration(200).attrTween("d", arcTween);

    // Enter new arcs
    path.enter().append("path")
        .attr("fill", (d, i) => color(i))
        .attr("d", arc)
        .attr("stroke", "white")
        .attr("stroke-width", "6px")
        .each(function (d) { this._current = d; });

</script>*@